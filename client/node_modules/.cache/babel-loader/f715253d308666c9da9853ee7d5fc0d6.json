{"ast":null,"code":"import _classCallCheck from\"/Users/jinkim/jinho_black/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jinkim/jinho_black/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";var GameObject=/*#__PURE__*/function(){function GameObject(game,width,height,x,y){_classCallCheck(this,GameObject);this.game=void 0;this.width=void 0;this.height=void 0;this.x=void 0;this.y=void 0;this.game=game;this.width=width;this.height=height;this.x=x;this.y=y;}_createClass(GameObject,[{key:\"update\",value:function update(dt){}},{key:\"draw\",value:function draw(ctx,dt){this.update(dt);ctx.fillRect(this.x,this.y,this.width,this.height);}},{key:\"collision\",value:function collision(box){var boxLeft=box.x;var boxRight=boxLeft+box.width;var boxTop=box.y;var boxBottom=boxTop+box.height;var oldBoxLeft=box.oldX;var oldBoxRight=oldBoxLeft+box.width;var oldBoxTop=box.oldY;var oldBoxBottom=oldBoxTop+box.height;var myLeft=this.x;var myRight=myLeft+this.width;var myTop=this.y;var myBottom=myTop+this.height;if(boxLeft<myRight&&boxRight>myLeft&&boxTop<myBottom&&boxBottom>myTop){var left=oldBoxRight<myLeft&&boxRight>=myLeft;var right=oldBoxLeft>=myRight&&boxLeft<myRight;var top=oldBoxBottom<myTop&&boxBottom>=myTop;var bot=oldBoxTop>=myBottom&&boxTop<myBottom;if(top||bot){box.dirY*=-1;}if(right||left){box.dirX*=-1;}if(top||bot||right||left)box.onCollision();}}}]);return GameObject;}();;export default GameObject;","map":{"version":3,"sources":["/Users/jinkim/jinho_black/client/src/Pong/GameObject.tsx"],"names":["GameObject","game","width","height","x","y","dt","ctx","update","fillRect","box","boxLeft","boxRight","boxTop","boxBottom","oldBoxLeft","oldX","oldBoxRight","oldBoxTop","oldY","oldBoxBottom","myLeft","myRight","myTop","myBottom","left","right","top","bot","dirY","dirX","onCollision"],"mappings":"+SAGMA,CAAAA,U,yBAOF,oBAAYC,IAAZ,CAAwBC,KAAxB,CAAuCC,MAAvC,CAAuDC,CAAvD,CAAkEC,CAAlE,CAA6E,uCAN7EJ,IAM6E,aAL7EC,KAK6E,aAJ7EC,MAI6E,aAH7EC,CAG6E,aAF7EC,CAE6E,QACzE,KAAKJ,IAAL,CAAYA,IAAZ,CACA,KAAKC,KAAL,CAAaA,KAAb,CACA,KAAKC,MAAL,CAAcA,MAAd,CACA,KAAKC,CAAL,CAASA,CAAT,CACA,KAAKC,CAAL,CAASA,CAAT,CACH,C,6CAED,gBAAOC,EAAP,CAAmB,CAElB,C,oBAED,cAAKC,GAAL,CAAeD,EAAf,CAA2B,CACvB,KAAKE,MAAL,CAAYF,EAAZ,EACAC,GAAG,CAACE,QAAJ,CAAa,KAAKL,CAAlB,CAAqB,KAAKC,CAA1B,CAA6B,KAAKH,KAAlC,CAAyC,KAAKC,MAA9C,EACH,C,yBAED,mBAAUO,GAAV,CAAqB,CACjB,GAAIC,CAAAA,OAAO,CAAGD,GAAG,CAACN,CAAlB,CACA,GAAIQ,CAAAA,QAAQ,CAAGD,OAAO,CAAGD,GAAG,CAACR,KAA7B,CACA,GAAIW,CAAAA,MAAM,CAAGH,GAAG,CAACL,CAAjB,CACA,GAAIS,CAAAA,SAAS,CAAGD,MAAM,CAAGH,GAAG,CAACP,MAA7B,CAEA,GAAIY,CAAAA,UAAU,CAAGL,GAAG,CAACM,IAArB,CACA,GAAIC,CAAAA,WAAW,CAAGF,UAAU,CAAGL,GAAG,CAACR,KAAnC,CACA,GAAIgB,CAAAA,SAAS,CAAGR,GAAG,CAACS,IAApB,CACA,GAAIC,CAAAA,YAAY,CAAGF,SAAS,CAAGR,GAAG,CAACP,MAAnC,CAEA,GAAIkB,CAAAA,MAAM,CAAG,KAAKjB,CAAlB,CACA,GAAIkB,CAAAA,OAAO,CAAGD,MAAM,CAAG,KAAKnB,KAA5B,CACA,GAAIqB,CAAAA,KAAK,CAAG,KAAKlB,CAAjB,CACA,GAAImB,CAAAA,QAAQ,CAAGD,KAAK,CAAG,KAAKpB,MAA5B,CAEA,GAAIQ,OAAO,CAAGW,OAAV,EAAqBV,QAAQ,CAAGS,MAAhC,EAA0CR,MAAM,CAAGW,QAAnD,EAA+DV,SAAS,CAAGS,KAA/E,CAAsF,CAClF,GAAIE,CAAAA,IAAI,CAAGR,WAAW,CAAGI,MAAd,EAAwBT,QAAQ,EAAIS,MAA/C,CACA,GAAIK,CAAAA,KAAK,CAAGX,UAAU,EAAIO,OAAd,EAAyBX,OAAO,CAAGW,OAA/C,CACA,GAAIK,CAAAA,GAAG,CAAGP,YAAY,CAAGG,KAAf,EAAwBT,SAAS,EAAIS,KAA/C,CACA,GAAIK,CAAAA,GAAG,CAAGV,SAAS,EAAIM,QAAb,EAAyBX,MAAM,CAAGW,QAA5C,CAEA,GAAIG,GAAG,EAAIC,GAAX,CAAgB,CACZlB,GAAG,CAACmB,IAAJ,EAAY,CAAC,CAAb,CACH,CACD,GAAIH,KAAK,EAAID,IAAb,CAAmB,CACff,GAAG,CAACoB,IAAJ,EAAY,CAAC,CAAb,CACH,CACD,GAAIH,GAAG,EAAIC,GAAP,EAAcF,KAAd,EAAuBD,IAA3B,CACIf,GAAG,CAACqB,WAAJ,GACP,CACJ,C,0BACJ,CAED,cAAe/B,CAAAA,UAAf","sourcesContent":["import Game from './Game';\nimport Ball from './Ball';\n\nclass GameObject {\n    game: Game;\n    width: number;\n    height: number;\n    x: number;\n    y: number;\n\n    constructor(game: Game, width: number, height: number, x: number, y: number) {\n        this.game = game;\n        this.width = width;\n        this.height = height;\n        this.x = x;\n        this.y = y;\n    }\n\n    update(dt: number) {\n\n    }\n\n    draw(ctx: any, dt: number) {\n        this.update(dt);\n        ctx.fillRect(this.x, this.y, this.width, this.height);\n    }\n\n    collision(box: Ball) {\n        let boxLeft = box.x;\n        let boxRight = boxLeft + box.width;\n        let boxTop = box.y;\n        let boxBottom = boxTop + box.height;\n\n        let oldBoxLeft = box.oldX;\n        let oldBoxRight = oldBoxLeft + box.width;\n        let oldBoxTop = box.oldY;\n        let oldBoxBottom = oldBoxTop + box.height;\n\n        let myLeft = this.x;\n        let myRight = myLeft + this.width;\n        let myTop = this.y;\n        let myBottom = myTop + this.height;\n\n        if (boxLeft < myRight && boxRight > myLeft && boxTop < myBottom && boxBottom > myTop) {\n            let left = oldBoxRight < myLeft && boxRight >= myLeft;\n            let right = oldBoxLeft >= myRight && boxLeft < myRight;\n            let top = oldBoxBottom < myTop && boxBottom >= myTop;\n            let bot = oldBoxTop >= myBottom && boxTop < myBottom;\n\n            if (top || bot) {\n                box.dirY *= -1;\n            }\n            if (right || left) {\n                box.dirX *= -1;\n            }\n            if (top || bot || right || left)\n                box.onCollision();\n        }\n    }\n};\n\nexport default GameObject;"]},"metadata":{},"sourceType":"module"}